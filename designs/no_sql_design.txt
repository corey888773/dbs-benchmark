NoSQL Database Design (Document-based - MongoDB Style)

When modeling this schema in a NoSQL database like MongoDB, we aim to denormalize and embed documents where relationships are tightly coupled and accessed together. Here's a descriptive layout using best practices:

1. Collection: Students
{
  "_id": ObjectId,
  "first_name": "John",
  "last_name": "Doe",
  "birth_date": "2005-06-15",
  "enrollments": [
    {
      "class_id": ObjectId,
      "enrolled_at": "2023-09-01T08:00:00Z"
    }
  ],
  "grades": [
    {
      "subject_id": ObjectId,
      "grade": 85,
      "created_at": "2024-05-10T12:00:00Z"
    }
  ]
}

2. Collection: Teachers
{
  "_id": ObjectId,
  "first_name": "Anna",
  "last_name": "Smith",
  "subject": "Mathematics",
  "hire_date": "2010-01-15"
}

3. Collection: Classes
{
  "_id": ObjectId,
  "name": "Algebra I",
  "teacher": {
    "teacher_id": ObjectId,
    "name": "Anna Smith"
  },
  "schedule": [
    {
      "subject_id": ObjectId,
      "day_of_week": "Monday",
      "time_start": "08:00",
      "time_end": "09:30"
    }
  ]
}

4. Collection: Subjects
{
  "_id": ObjectId,
  "name": "Mathematics",
  "description": "Mathematics subject details."
}

Best Practices Applied:
- Embedding used for enrollments and grades in students since they're often queried together.
- Embedding schedule in classes for faster read access.
- Use of references (ObjectIds) where relationships are looser or data is reused (e.g., teacher or subject references).
- Avoid deep nesting to prevent document bloating.
- Atomicity maintained on embedded updates (e.g., student enrollments and grades).
